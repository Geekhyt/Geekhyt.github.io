(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{519:function(s,t,a){"use strict";a.r(t);var n=a(63),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("经过数据结构与算法先导篇的"),a("code",[s._v("洗脑")]),s._v("，不知道大家对数据结构与算法重要性的认知有没有上了一层台阶。(虽然阅读量少的可怜)。没看过的建议先去看先导篇"),a("a",{attrs:{href:"https://juejin.im/post/5e9bb8c251882573820998ac",target:"_blank",rel:"noopener noreferrer"}},[s._v("前端如何搞定数据结构与算法(先导篇)"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("不过没关系，至少是有同学在评论区反馈期待下一篇的，那就要坚持把这个系列写下去，今天来给大家聊一聊在数据结构与算法中占了半壁江山的概念。")]),s._v(" "),a("h2",{attrs:{id:"时间复杂度和空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度和空间复杂度"}},[s._v("#")]),s._v(" 时间复杂度和空间复杂度")]),s._v(" "),a("p",[s._v("鉴别一名工程师是否是算法高手的方法之一就是考察他对复杂度分析的掌握程度。说起来可能有点玄幻，算法高手对复杂度分析一般讲究的都是"),a("code",[s._v("感觉")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("时间管理大师 艾克：有的时候，时光还是有他的好处的。两极反转！")])]),s._v(" "),a("ul",[a("li",[s._v("拿英雄联盟举例，比如当 "),a("code",[s._v("IG")]),s._v(" 夺得 "),a("code",[s._v("S")]),s._v(" 系列赛总冠军后，你会发现一大群只有"),a("code",[s._v("意识")]),s._v("，但操作已经跟不上的玩家出现在排位赛的视野当中。(没错，就是我们)在学生时代，我们也是钻石、大师级的高手。然而因为工作，我们只能告别我们的青春。但是，"),a("code",[s._v("意识")]),s._v("还在！")])]),s._v(" "),a("p",[s._v("回到本文，面试时面试官考察你算法能力的时候，时间复杂度和空间复杂度也是绕不过去的坎。你不仅需要掌握多种解题思路，而且要能够从复杂度分析的角度找到最优解，这样才能征服面试官。工程中，选取最优的算法则更为重要。一个优秀的算法能节约的系统成本和维护成本都是巨大的。")]),s._v(" "),a("p",[a("strong",[s._v("话不多说，上才艺！")])]),s._v(" "),a("p",[s._v("(上概念)")]),s._v(" "),a("p",[s._v("首先理解时间和空间：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("时间：执行当前算法所消耗的时间")])]),s._v(" "),a("li",[a("strong",[s._v("空间：执行当前算法需要占用多少内存空间")])])]),s._v(" "),a("p",[s._v("再加上复杂度：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("时间复杂度：全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。")])]),s._v(" "),a("li",[a("strong",[s._v("空间复杂度：全称就是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。")])])]),s._v(" "),a("p",[s._v("也就是说，算法的执行效率由"),a("code",[s._v("执行时间、存储空间")]),s._v("两个方面决定。"),a("code",[s._v("复杂度分析就是用来分析算法执行效率与数据规模之间的关系")]),s._v("，包括"),a("code",[s._v("时间复杂度")]),s._v("和"),a("code",[s._v("空间复杂度")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"为什么搞出这两个概念呢？还嫌我需要理解的概念不够多吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么搞出这两个概念呢？还嫌我需要理解的概念不够多吗？"}},[s._v("#")]),s._v(" 为什么搞出这两个概念呢？还嫌我需要理解的概念不够多吗？")]),s._v(" "),a("p",[s._v("其实，你也可以进行事后统计法，俗称 "),a("strong",[s._v("马后炮")]),s._v("。不过既然都叫马后炮了，那肯定是有它的缺点的。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("事后统计的测试一般都需要依附于具体的环境，比如公司的 "),a("code",[s._v("DEV、SIT、UAT")]),s._v(" 等环境机器的配置都不同，那么测出来的结果也会有差别。说白了，你拿同样一段代码，在不同的处理器下 "),a("code",[s._v("(i9、i5、i3)")]),s._v(" 来运行，测试出来的结果也是不同的。")])]),s._v(" "),a("li",[a("p",[s._v("除了环境，测试结果受数据规模的影响也很大。熟悉排序算法的同学们肯定知道，不同的数据规模下，排序算法的执行效率也会不同。")])])]),s._v(" "),a("p",[s._v("所以，我们需要一种复杂度分析法，进行事前分析。帮助我们在写代码的过程中尽可能的降低复杂度，这样代码不但在不同的环境下都能以最快的效率执行。而且，这种方法也不需要用具体数据规模的数据来进行测试，就可以粗略的计算出执行效率。这样就把事后统计法的缺点给 cover 了，一举多得。")]),s._v(" "),a("h2",{attrs:{id:"大-o-表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大-o-表示法"}},[s._v("#")]),s._v(" 大 O 表示法")]),s._v(" "),a("blockquote",[a("p",[s._v("大 O 符号由德国数论学家保罗·巴赫曼 Paul Bachmann 在 1892 年的著作 《解析数论》首先引入，后由另一位德国数论学家 艾德蒙·朗道 Edmund Landau 推广。")])]),s._v(" "),a("p",[a("code",[s._v("T(n) = O(f(n))")])]),s._v(" "),a("p",[a("code",[s._v("所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。")])]),s._v(" "),a("ul",[a("li",[s._v("T(n)：代码执行的时间")]),s._v(" "),a("li",[s._v("n：数据规模")]),s._v(" "),a("li",[s._v("f(n)：每行代码执行的次数总和")]),s._v(" "),a("li",[s._v("O：表示 T(n) 与 f(n) 成正比")])]),s._v(" "),a("p",[s._v("注意，初学者可能会认为这种方法就代表真实的代码执行时间，并不是这样，其代表的是代码的执行时间随数据规模增长的变化趋势。")]),s._v(" "),a("h3",{attrs:{id:"常见的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的时间复杂度"}},[s._v("#")]),s._v(" 常见的时间复杂度")]),s._v(" "),a("p",[s._v("按数量级递增如下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("常量阶 O(1)")])]),s._v(" "),a("li",[a("code",[s._v("对数阶 O(logn)")])]),s._v(" "),a("li",[a("code",[s._v("线性阶 O(n)")])]),s._v(" "),a("li",[a("code",[s._v("线性对数阶 O(nlogn)")])]),s._v(" "),a("li",[a("code",[s._v("平方阶 O(n^2)")])]),s._v(" "),a("li",[a("code",[s._v("立方阶 O(n^3)")])]),s._v(" "),a("li",[a("code",[s._v("指数阶 O(2^n)")])]),s._v(" "),a("li",[a("code",[s._v("阶乘阶 O(n!)")])])]),s._v(" "),a("p",[s._v("其中，"),a("code",[s._v("指数阶")]),s._v("和"),a("code",[s._v("阶乘阶")]),s._v("会随着数据规模 n 的增大，执行时间急剧增长，十分低效，我们暂且不去分析。下面我们通过代码来逐一理解其余的时间复杂度。")]),s._v(" "),a("h3",{attrs:{id:"常量阶-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量阶-o-1"}},[s._v("#")]),s._v(" 常量阶 O(1)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上述代码，执行时消耗的时间不受某个变量 (n) 的增长而影响，所以它的时间复杂度为 O(1)。也就是说，一般情况下除了循环语句、递归语句，时间复杂度都为 O(1)。")]),s._v(" "),a("h3",{attrs:{id:"对数阶-o-logn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对数阶-o-logn"}},[s._v("#")]),s._v(" 对数阶 O(logn)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("观察上述代码，当循环 x 次后，循环退出。也就是说 2 的 x 次方等于 n。那么 x = log2^n，也就是循环 log2^n 次后循环退出，得出时间复杂度为 O(logn)。"),a("code",[s._v("二分查找的时间复杂度就是 O(logn)。")])]),s._v(" "),a("h3",{attrs:{id:"线性阶-o-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性阶-o-n"}},[s._v("#")]),s._v(" 线性阶 O(n)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("996")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'来过'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'次前端食堂吃饭'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("毫无疑问，for循环里的代码会执行 n 遍，所以这类代码的时间复杂度就是 O(n)。"),a("code",[s._v("计数排序、基数排序、桶排序的时间复杂度都是 O(n)。")])]),s._v(" "),a("h3",{attrs:{id:"线性对数阶-o-nlogn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性对数阶-o-nlogn"}},[s._v("#")]),s._v(" 线性对数阶 O(nlogn)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("理解了对数阶和线性阶，线性对数阶理解起来就很容易了，就是将时间复杂度为 O(logn) 的代码循环 n 遍，那么它的时间复杂度就是 O (nlogn)。"),a("code",[s._v("归并排序、快速排序、堆排序的时间复杂度都是 O(nlogn)。")])]),s._v(" "),a("h3",{attrs:{id:"平方阶-o-n-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平方阶-o-n-2"}},[s._v("#")]),s._v(" 平方阶 O(n^2)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'前端食堂的饭真香'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("平方阶就是把 O(n) 的代码再嵌套一层循环，它的时间复杂度就是 O(n^2)了。"),a("code",[s._v("冒泡排序、插入排序、选择排序的时间复杂度都是 O(n^2)。")])]),s._v(" "),a("p",[s._v("至于 O(n^3) 就是在 O(n^2) 的基础上再嵌套一层循环。(俄罗斯套娃)")]),s._v(" "),a("p",[s._v("我们采用大 O 表示法进行复杂度分析的时候，是可以忽略系数的，一般情况下只需要关注循环执行次数最多的一段代码进行分析即可。")]),s._v(" "),a("p",[s._v("除此之外，"),a("strong",[s._v("还有最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度以及均摊时间复杂度等")]),s._v("。在实际中，大多数情况下并不是特别常用，这里不再展开。")]),s._v(" "),a("p",[s._v("在现实中，往往代码会比较复杂，这里总结了几条判断时间复杂度的小技巧送给你：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("单段代码看高频：循环")])]),s._v(" "),a("li",[a("code",[s._v("多段代码取最大：有循环和多重循环的情况，取多重循环的复杂度")])]),s._v(" "),a("li",[a("code",[s._v("嵌套代码求乘积：循环中的递归")])]),s._v(" "),a("li",[a("code",[s._v("多个规模求和：分别有两个参数控制两个循环的次数，取二者的复杂度相加")])])]),s._v(" "),a("h2",{attrs:{id:"常见的空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的空间复杂度"}},[s._v("#")]),s._v(" 常见的空间复杂度")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("O(1)")])]),s._v(" "),a("li",[a("code",[s._v("O(n)")])]),s._v(" "),a("li",[a("code",[s._v("O(n^2)")])])]),s._v(" "),a("p",[s._v("我们还是通过代码来逐个分析：")]),s._v(" "),a("h3",{attrs:{id:"o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-1"}},[s._v("#")]),s._v(" O(1)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们定义的变量a、b所占有的空间并不会随着某个变量的变化而变化，所以它的空间复杂度为 O(1)。")]),s._v(" "),a("h3",{attrs:{id:"o-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-n"}},[s._v("#")]),s._v(" O(n)")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("996")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("arr 所占用的内存由 n 来决定，会随着 n 的增大而增大，所以它的空间复杂度就是 O(n)。"),a("strong",[s._v("如果初始化一个二维数组 "),a("code",[s._v("n*n")]),s._v("，那么它的空间复杂度就是 O(n^2)。")])]),s._v(" "),a("p",[s._v("除此之外，O(logn)、O(nlogn) 这样的对数阶空间复杂度在平时也很少见，这里不再展开。")]),s._v(" "),a("p",[a("strong",[s._v("一般在实际中，空间复杂度和你初始化的数组长度有关。除此之外，也和递归的深度有关。")])]),s._v(" "),a("h2",{attrs:{id:"时空转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时空转换"}},[s._v("#")]),s._v(" 时空转换")]),s._v(" "),a("p",[s._v("时间复杂度和空间复杂度往往是相互影响的，两者不可得兼。在算法解题套路以及工程中，根据实际情况，常用的做法就是空间换时间。比如：记忆化搜索、缓存等。")]),s._v(" "),a("h2",{attrs:{id:"后续算法系列专栏计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后续算法系列专栏计划"}},[s._v("#")]),s._v(" 后续算法系列专栏计划")]),s._v(" "),a("ul",[a("li",[s._v("LeetCode刷题心得")]),s._v(" "),a("li",[s._v("常见算法解题套路")])])])}),[],!1,null,null,null);t.default=r.exports}}]);