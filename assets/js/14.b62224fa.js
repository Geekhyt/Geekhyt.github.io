(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{482:function(e,v,_){"use strict";_.r(v);var t=_(63),r=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"彩蛋"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#彩蛋"}},[e._v("#")]),e._v(" 彩蛋")]),e._v(" "),_("p",[e._v("昨晚搬砖回家看到 Peter 发了条朋友圈，腾讯云游戏平台 START 公测发布，他在用 MAC 打 LOL。我紧随其后体验了一波，毕竟 LOL 是我们这代人的青春，工作后很少有时间玩，用上 MAC 后，之前的游戏本也放在箱底很久了。")]),e._v(" "),_("p",[e._v("选个 EZ 浪一浪～(天赋都没来得及换)")]),e._v(" "),_("p",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/electron5.jpg",width:"500"}})]),e._v(" "),_("p",[e._v("20 分钟轻松拿下首胜(毕竟 s2 老玩家了，匹配局常规操作)，综合体验还是很不错的，家用网速下基本感觉不到延迟，除了窗口模式下调整视角时鼠标有点难受之外。(想要体验的同学记得先把触发角关了)")]),e._v(" "),_("p",[e._v("云游戏平台这种“云”模式彻底解放了“跨平台”的想象力，随着 5G 的到来，它有没有可能是未来解决跨平台的最佳方案呢？对我们前端工程师来说，等待我们的又会是什么新的挑战呢？欢迎同学们留言一起探讨～")]),e._v(" "),_("p",[e._v("书归正传，最近手头在做 Electron 的项目，Electron 为了实现跨平台做了很多努力。（刚好可以与云游戏平台这种模式形成对比。）下面我们来一起看一看。​")]),e._v(" "),_("h2",{attrs:{id:"浏览器架构演进"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器架构演进"}},[e._v("#")]),e._v(" 浏览器架构演进")]),e._v(" "),_("p",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/electron1.jpg",width:"500"}})]),e._v(" "),_("p",[e._v("我们先从浏览器架构演进开始说起，日益复杂的业务需求不断 push 着浏览器架构不断的演进和迭代。")]),e._v(" "),_("p",[e._v("拿我们最喜欢的 "),_("code",[e._v("Chrome")]),e._v(" 举例，从 2007 年以前的单进程架构到现在的多进程架构，浏览器因为架构的调整，\n变得更加稳定、更加流畅、更加安全。目前你能看到的最新的 "),_("code",[e._v("Chrome")]),e._v(" 浏览器应该包括如下进程：")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("1 个浏览器（Browser）主进程")])]),e._v(" "),_("li",[_("code",[e._v("1 个 GPU 进程")])]),e._v(" "),_("li",[_("code",[e._v("1 个网络（NetWork）进程")])]),e._v(" "),_("li",[_("code",[e._v("多个渲染进程 (运行在沙箱模式下)")])]),e._v(" "),_("li",[_("code",[e._v("多个插件进程")])])]),e._v(" "),_("p",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/electron4.jpg",width:"500"}})]),e._v(" "),_("p",[e._v("不过，软件工程没有银弹。浏览器的架构体系也随着调整变得更加复杂， 也会有更高的资源占用。")]),e._v(" "),_("p",[e._v("如何寻求一种在资源占用和复杂架构体系之间的平衡便成为了一个难题。")]),e._v(" "),_("p",[_("strong",[e._v("小孩子才做选择，鱼和熊掌我都要！")])]),e._v(" "),_("p",[_("code",[e._v("Chrome 团队在 2016 年使用“面向服务的架构”（Services Oriented Architecture，简称 SOA）的思想设计了新的 Chrome 架构。")])]),e._v(" "),_("p",[_("code",[e._v("Chrome")]),e._v(" 团队将模块重构成独立的服务 ("),_("code",[e._v("Service")]),e._v(")，服务运行在独立的进程中，想要访问的话必须使用定义好的接口，通过 "),_("code",[e._v("IPC")]),e._v(" 来进行通信。这样的架构无疑更加内聚、松耦合、易于维护和扩展。")]),e._v(" "),_("h2",{attrs:{id:"chromium-架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#chromium-架构"}},[e._v("#")]),e._v(" Chromium 架构")]),e._v(" "),_("p",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/electron0.jpg",width:"500"}})]),e._v(" "),_("p",[_("a",{attrs:{href:"https://www.chromium.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chromium"),_("OutboundLink")],1),e._v(" 是 "),_("code",[e._v("Chrome")]),e._v(" 的开源版，也是一个浏览器。")]),e._v(" "),_("ul",[_("li",[e._v("主进程的 "),_("code",[e._v("RenderProcessHost")]),e._v(" 和 渲染进程的 "),_("code",[e._v("RenderProcess")]),e._v(" 专门处理 "),_("code",[e._v("IPC")]),e._v(" 事件。")]),e._v(" "),_("li",[e._v("渲染进程的 "),_("code",[e._v("RenderView")]),e._v("： 我们的页面就是在这里基于 "),_("code",[e._v("Webkit")]),e._v(" 排版展示出来的。")]),e._v(" "),_("li",[_("code",[e._v("ResourceDispatcher")]),e._v(" 处理资源请求，当页面需要请求资源时，通过 "),_("code",[e._v("ResourceDispatcher")]),e._v("，创建一个请求 "),_("code",[e._v("ID")]),e._v(" 转发到 "),_("code",[e._v("IPC")]),e._v("，在 "),_("code",[e._v("Browser")]),e._v(" 进程中处理然后返回。")])]),e._v(" "),_("h2",{attrs:{id:"electron-架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#electron-架构"}},[e._v("#")]),e._v(" Electron 架构")]),e._v(" "),_("p",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/electron3.jpg",width:"500"}})]),e._v(" "),_("ul",[_("li",[e._v("在各个进程中暴露了 "),_("code",[e._v("Native API (Main Native API、Renderer Native API)")])]),e._v(" "),_("li",[e._v("引入 "),_("code",[e._v("Node.js")])])]),e._v(" "),_("p",[e._v("这样，在 "),_("code",[e._v("Electron")]),e._v(" 中就可以使用 "),_("code",[e._v("Chromium")]),e._v(" 和 "),_("code",[e._v("Node.js")]),e._v(" 做好玩的事情了！")]),e._v(" "),_("p",[e._v("不过在此之前，还有一个难点需要解决：如何将 "),_("code",[e._v("Node.js")]),e._v(" 和 "),_("code",[e._v("Chromiums")]),e._v(" 整合？")]),e._v(" "),_("p",[_("code",[e._v("Node.js")]),e._v(" 事件循环基于 "),_("a",{attrs:{href:"https://github.com/libuv/libuv",target:"_blank",rel:"noopener noreferrer"}},[e._v("libuv"),_("OutboundLink")],1),e._v("，但 "),_("code",[e._v("Chromium")]),e._v(" 基于 "),_("a",{attrs:{href:"https://chromium.googlesource.com/chromium/chromium/+/master/base/message_pump.h",target:"_blank",rel:"noopener noreferrer"}},[e._v("message_pump"),_("OutboundLink")],1),e._v("。")]),e._v(" "),_("p",[e._v("解决这个问题的的主要思路有两种：")]),e._v(" "),_("ul",[_("li",[e._v("1.将 "),_("code",[e._v("Chromium")]),e._v(" 集成到 "),_("code",[e._v("Node.js")]),e._v("：用 "),_("code",[e._v("libuv")]),e._v(" 实现 "),_("code",[e._v("message_pump")]),e._v("。")]),e._v(" "),_("li",[e._v("2.将 "),_("code",[e._v("Node.js")]),e._v(" 集成到 "),_("code",[e._v("Chromium")]),e._v(" 。")])]),e._v(" "),_("p",[e._v("第一种方案，"),_("a",{attrs:{href:"https://github.com/nwjs/nw.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("NW.js"),_("OutboundLink")],1),e._v(" 就是这么做的。"),_("code",[e._v("Electron")]),e._v(" 前期也是这样尝试的，结果发现在渲染进程里实现比较容易，但是在主进程里却很麻烦，因为各个系统的 "),_("code",[e._v("GUI")]),e._v(" 实现都不同，"),_("code",[e._v("Mac")]),e._v(" 是 "),_("code",[e._v("NSRunLoop")]),e._v("，"),_("code",[e._v("Linux")]),e._v(" 是 "),_("code",[e._v("glib")]),e._v("，不仅工程量十分浩大，而且一些边界情况处理起来也十分棘手。")]),e._v(" "),_("p",[e._v("后来作者另辟蹊径，再次进行尝试，用一个小间隔的定时器轮询 "),_("code",[e._v("GUI")]),e._v(" 事件，发现 "),_("code",[e._v("GUI")]),e._v(" 响应的非常慢，"),_("code",[e._v("CPU")]),e._v(" 也爆表。")]),e._v(" "),_("p",[e._v("直到后来 "),_("code",[e._v("libuv")]),e._v(" 引入了 "),_("code",[e._v("backend_fd")]),e._v(" 的概念，相当于 "),_("code",[e._v("libuv")]),e._v(" 轮询事件的文件描述符，这样就可以通过轮询 "),_("code",[e._v("backend_fd")]),e._v(" 来得到 "),_("code",[e._v("libuv")]),e._v(" 的一个新事件了。也就是第二种思路，将 "),_("code",[e._v("Node.js")]),e._v(" 集成到 "),_("code",[e._v("Chromium")]),e._v("。")]),e._v(" "),_("p",[e._v("如果你想了解更多，也可以去看看下面作者的这个知乎回答～")]),e._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.zhihu.com/question/36292298/answer/102418523",target:"_blank",rel:"noopener noreferrer"}},[e._v("维护一个大型开源项目是怎样的体验？"),_("OutboundLink")],1)])]),e._v(" "),_("p",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/electron2.png",width:"500"}})]),e._v(" "),_("h2",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),_("p",[e._v("将 "),_("code",[e._v("Node.js")]),e._v(" 集成到 "),_("code",[e._v("Chromium")]),e._v(" 中的原理：")]),e._v(" "),_("p",[_("code",[e._v("Electron")]),e._v(" 起了一个新的安全线程去轮询 "),_("code",[e._v("backend_fd")]),e._v("，当 "),_("code",[e._v("Node.js")]),e._v(" 有一个新的事件后，通过 "),_("code",[e._v("PostTask")]),e._v(" 转发到 "),_("code",[e._v("Chromium")]),e._v(" 的事件循环中，这样就实现了 "),_("code",[e._v("Electron")]),e._v(" 的事件融合。")]),e._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),_("ul",[_("li",[e._v("《浏览器工作原理与实践》 李兵")]),e._v(" "),_("li",[e._v("《Electron开发实战》 邓耀龙")])])])}),[],!1,null,null,null);v.default=r.exports}}]);