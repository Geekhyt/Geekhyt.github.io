(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{518:function(v,_,e){"use strict";e.r(_);var t=e(63),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("p",[v._v("在0202年的今天，由于每天被无数的信息轰炸，大多数人已经变得越来越浮躁了，并且丧失了独立思考的能力。")]),v._v(" "),e("h2",{attrs:{id:"为什么要学习数据结构与算法？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习数据结构与算法？"}},[v._v("#")]),v._v(" 为什么要学习数据结构与算法？")]),v._v(" "),e("p",[v._v("你可能会经常听到这样的感慨：")]),v._v(" "),e("ul",[e("li",[v._v("技术人究竟能走多远？我遇到了天花板")]),v._v(" "),e("li",[v._v("35岁的程序员要如何面对中年危机？")]),v._v(" "),e("li",[v._v("技术更新太快，好累，学不动了")])]),v._v(" "),e("p",[v._v("然后，你也变得焦虑起来。那你有没有静下心来想过，如何才能抵御年龄增长并且使自己增值呢？")]),v._v(" "),e("p",[v._v("无非是终身学习，持续修炼自己的内功。内功也就是基础知识和核心概念，"),e("code",[v._v("这些轰轰烈烈发展的技术本质，其实都是基础知识")]),v._v("，也就是我们在大学里学过的基础课程。")]),v._v(" "),e("ul",[e("li",[v._v("操作系统")]),v._v(" "),e("li",[v._v("计算机组成原理")]),v._v(" "),e("li",[v._v("计算机网络")]),v._v(" "),e("li",[v._v("编译原理")]),v._v(" "),e("li",[v._v("设计模式")]),v._v(" "),e("li",[v._v("数据结构与算法")])]),v._v(" "),e("p",[e("code",[v._v("这也就是为什么越靠谱的面试官越注重你基础知识的掌握程度，为什么越牛的的企业越重视你的算法能力。因为当你拥有了这些，你已经比大多数人优秀了。你的天花板由你自己来决定，大家口中的中年危机可能并不会成为你的危机。新技术来临时，你对它的本质会看得更加透彻，学起来会一通百通。这样的人才，公司培养你也会花费更少的成本。")])]),v._v(" "),e("p",[v._v("(不过，一辈子做个开开心心的 CRUD Boy 也是一种选择。)")]),v._v(" "),e("h2",{attrs:{id:"数据结构与算法之间的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法之间的关系"}},[v._v("#")]),v._v(" 数据结构与算法之间的关系")]),v._v(" "),e("p",[e("a",{attrs:{href:"http://users.ece.utexas.edu/~adnan/pike.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("Rob Pike's 5 Rules of Programming"),e("OutboundLink")],1),v._v("中的第五条是这样说的：")]),v._v(" "),e("blockquote",[e("p",[v._v("Data dominates. If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.")]),v._v(" "),e("p",[v._v("数据占主导。如果您选择了正确的数据结构并组织得当，那么这些算法几乎总是不言而喻的。数据结构而非算法是编程的核心。")])]),v._v(" "),e("p",[v._v("瑞士计算机科学家，"),e("code",[v._v("Algol W，Modula，Oberon")]),v._v(" 和 "),e("code",[v._v("Pascal")]),v._v(" 语言的设计师 "),e("code",[v._v("Niklaus Emil Wirth")]),v._v(" 写过一本非常经典的书"),e("code",[v._v("《Algorithms + Data Structures = Programs》")]),v._v("，即"),e("code",[v._v("算法 + 数据结构 = 程序")]),v._v("。")]),v._v(" "),e("p",[v._v("我们可以得出结论，"),e("code",[v._v("数据结构与算法之间是相辅相成的关系。数据结构服务于算法，算法作用于特定的数据结构之上。")])]),v._v(" "),e("h2",{attrs:{id:"数据结构与算法好难，怎么学？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法好难，怎么学？"}},[v._v("#")]),v._v(" 数据结构与算法好难，怎么学？")]),v._v(" "),e("ul",[e("li",[v._v("是不是我脑子有问题？智商不够？")]),v._v(" "),e("li",[v._v("数学太难了，我天生数学就不好")]),v._v(" "),e("li",[v._v("好不容易搞懂了一个算法，没过几天就忘了\n"),e("p",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/data1.png",width:"700"}})])])]),v._v(" "),e("p",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/data0.png",width:"800"}})]),v._v(" "),e("p",[v._v("在我坚持刷 "),e("code",[v._v("LeetCode")]),v._v(" 这段时间，我也曾产生过怀疑，但后来发现，其实都不是。学习都是反人性的，贵在坚持。数据结构与算法这块知识并不适合零碎的时间来学习，你首先需要规划整块的时间。然后从最基础数据结构开始学起，从易到难，由浅入深。学到后面你会发现。其实，数据结构中的基础就是"),e("code",[v._v("数组(顺序存储)和链表(链式存储)")]),v._v("。")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("队列和栈可以分别通过数组和链表实现")])]),v._v(" "),e("li",[e("code",[v._v("通常情况下我们会用数组实现堆(完全二叉树)，用链表也可以实现(二叉搜索树、红黑树、AVL、B树等)")])]),v._v(" "),e("li",[e("code",[v._v("图用二维数组实现就是邻接矩阵，用链表实现就是邻接表")])]),v._v(" "),e("li",[e("code",[v._v("散列表中可以用链表解决散列冲突(拉链法)，也可以用数组(线性探测法)")])])]),v._v(" "),e("p",[v._v("所以，记住这些基础的概念，学习复杂的数据结构和算法时会事半功倍。")]),v._v(" "),e("p",[v._v("(算法的套路过多，请允许我再开一篇专栏)")]),v._v(" "),e("h3",{attrs:{id:"时间久了记不住怎么办？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#时间久了记不住怎么办？"}},[v._v("#")]),v._v(" 时间久了记不住怎么办？")]),v._v(" "),e("p",[v._v("美国缅因州国家训练实验室做过"),e("code",[v._v("学习金字塔")]),v._v("的实验并得出如下报告，这个理论最早于1946年由美国学者 "),e("code",[v._v("Edgar Dale")]),v._v(" 提出。")]),v._v(" "),e("p",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/data3.png",width:"800"}})]),v._v(" "),e("p",[v._v("人的学习分为被动学习和主动学习两个层次。")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("被动学习：听讲、阅读、试听、演示。学习内容平均留存率为5%、10%、20%和30%。")])]),v._v(" "),e("li",[e("code",[v._v("主动学习：讨论、实践、教授给他人，平均留存率为50%、75%和90%。")])])]),v._v(" "),e("p",[v._v("这个理论可能大家早已听过，但是实际践行的人又有多少呢？")]),v._v(" "),e("p",[v._v("数据结构与算法也是这样，你需要养成 "),e("code",[v._v("LeetCode")]),v._v(" 上每日一题的习惯，并及时复习淡忘的部分。除此之外，践行主动学习。找到志同道合的小伙伴，一起交流进步。还可以在开源项目上提供题解，这样也是教授给他人的一种方式。")]),v._v(" "),e("p",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/data2.png",width:"500"}})]),v._v(" "),e("p",[v._v("这里推荐一个好朋友 "),e("code",[v._v("lucifer")]),v._v(" 的已有 "),e("code",[v._v("30K+ Star")]),v._v("的 "),e("code",[v._v("LeetCode")]),v._v(" 题解库，我已经提交了一些题解，写题解的时候你会发现，这才是真正考验你是否掌握的时候。")]),v._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/azl397985856/leetcode",target:"_blank",rel:"noopener noreferrer"}},[v._v("Lucifer的LeetCode解题之路"),e("OutboundLink")],1)]),v._v(" "),e("p",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/data3.1.jpg",width:"800"}})]),v._v(" "),e("h2",{attrs:{id:"数据结构与算法在前端中的应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法在前端中的应用"}},[v._v("#")]),v._v(" 数据结构与算法在前端中的应用")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("你熟知的 "),e("code",[v._v("DOM")]),v._v(" 树、"),e("code",[v._v("AST")]),v._v(" 树、以及 "),e("code",[v._v("Vue、React")]),v._v(" 的 "),e("code",[v._v("Virtual DOM")]),v._v(" 都是树。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("React Hooks")]),v._v(" 的本质是数组，"),e("code",[v._v("React Fiber")]),v._v(" 是基于链表实现的。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("HTTP")]),v._v(" 缓存响应消息 和 "),e("code",[v._v("Vue")]),v._v(" 的 "),e("code",[v._v("keep-alive")]),v._v(" 都用到了 "),e("code",[v._v("LRU")]),v._v(" 算法。")])]),v._v(" "),e("li",[e("p",[v._v("浏览器前进后退功能通过"),e("code",[v._v("栈")]),v._v("实现。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("TCP")]),v._v(" 连接实现多路复用时借助了"),e("code",[v._v("epoll")]),v._v("，而决定 "),e("code",[v._v("epoll")]),v._v(" 高效的原因：数据结构采用了"),e("code",[v._v("红黑树")]),v._v("和"),e("code",[v._v("队列")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("搜索引擎采用的是"),e("code",[v._v("广度优先搜索策略")]),v._v("。")])])]),v._v(" "),e("p",[v._v("如果你了解 "),e("code",[v._v("Linux、Nginx")]),v._v(" 、数据库和一些消息队列，你会发现到处都是数据结构与算法的应用。这里举几个例子：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Linux")]),v._v(" 进程调度、进程空间管理用到了"),e("code",[v._v("红黑树")])]),v._v(" "),e("li",[e("code",[v._v("Linux")]),v._v(" 文件系统中为了提高目录项对象的处理效率："),e("code",[v._v("LRU、哈希表")])]),v._v(" "),e("li",[e("code",[v._v("Linux")]),v._v(" 路由表 "),e("code",[v._v("Tire 树")])]),v._v(" "),e("li",[e("code",[v._v("Nginx")]),v._v(" 定义缓存 key 用到了"),e("code",[v._v("红黑树")])]),v._v(" "),e("li",[e("code",[v._v("MySQL")]),v._v(" 数据库索引使用 "),e("code",[v._v("B+ 树")]),v._v("提高查询效率")]),v._v(" "),e("li",[e("code",[v._v("Redis")]),v._v("中根据大多数开发场景下，数据的大小和多少采用更适合存储的数据结构。(数据量小用数组下标访问快、占用内存小。但是因为数组需要占用连续的内存空间，所以当数据量大的时候，采用链表，同时又为了兼顾速度又需要和数组结合，从而有了散列表。)")]),v._v(" "),e("li",[v._v("分布式消息队列，"),e("code",[v._v("RocketMQ")]),v._v("、"),e("code",[v._v("Kafka")]),v._v(" 也是一种"),e("code",[v._v("队列")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"通关数据结构与算法的捷径？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通关数据结构与算法的捷径？"}},[v._v("#")]),v._v(" 通关数据结构与算法的捷径？")]),v._v(" "),e("p",[e("code",[v._v("刷题就是捷径。")])]),v._v(" "),e("p",[v._v("对，你没看错。")]),v._v(" "),e("p",[v._v("其实，和计算机交流真的很简单，你给他输入，他肯定会给你输出。比女朋友好伺候多了。")]),v._v(" "),e("h2",{attrs:{id:"掘金小册、开源项目及书单推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#掘金小册、开源项目及书单推荐"}},[v._v("#")]),v._v(" 掘金小册、开源项目及书单推荐")]),v._v(" "),e("h3",{attrs:{id:"掘金小册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#掘金小册"}},[v._v("#")]),v._v(" 掘金小册")]),v._v(" "),e("p",[e("code",[v._v("修言的 《前端算法与数据结构面试：底层逻辑解读与大厂真题训练》")]),v._v("，我在小册撰写前期有幸参与试读，修言大佬保姆级别教程，不买后悔系列。")]),v._v(" "),e("h3",{attrs:{id:"开源项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开源项目"}},[v._v("#")]),v._v(" 开源项目")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("lucifer")]),v._v(" 的 "),e("a",{attrs:{href:"https://github.com/azl397985856/leetcode",target:"_blank",rel:"noopener noreferrer"}},[v._v("LeetCode解题之路"),e("OutboundLink")],1),v._v("，上文提到过，已有 "),e("code",[v._v("30K+Star")]),v._v("，还有他的新书"),e("a",{attrs:{href:"https://lucifer.ren/blog/2020/04/07/leetcode-book.intro/",target:"_blank",rel:"noopener noreferrer"}},[v._v("或许是一本可以彻底改变你刷 LeetCode 效率的题解书"),e("OutboundLink")],1)])]),v._v(" "),e("li",[e("p",[v._v("如果你喜欢看视频，可以来"),e("a",{attrs:{href:"http://leetcode-solution.cn",target:"_blank",rel:"noopener noreferrer"}},[v._v("力扣加加"),e("OutboundLink")],1),v._v(" 看视频题解哦～")])]),v._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://lucifer.ren/blog/",target:"_blank",rel:"noopener noreferrer"}},[v._v("lucifer"),e("OutboundLink")],1),v._v("单身可撩！快来个宝藏女孩收了他！")])])]),v._v(" "),e("h3",{attrs:{id:"书单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#书单"}},[v._v("#")]),v._v(" 书单")]),v._v(" "),e("h4",{attrs:{id:"初级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初级"}},[v._v("#")]),v._v(" 初级")]),v._v(" "),e("ul",[e("li",[v._v("算法图解")]),v._v(" "),e("li",[v._v("大话数据结构")]),v._v(" "),e("li",[v._v("算法之美")]),v._v(" "),e("li",[v._v("数学之美")]),v._v(" "),e("li",[v._v("数据结构与算法 JavaScript 描述")])]),v._v(" "),e("h4",{attrs:{id:"经典"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#经典"}},[v._v("#")]),v._v(" 经典")]),v._v(" "),e("ul",[e("li",[v._v("算法")]),v._v(" "),e("li",[v._v("算法导论")])]),v._v(" "),e("h4",{attrs:{id:"典藏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#典藏"}},[v._v("#")]),v._v(" 典藏")]),v._v(" "),e("ul",[e("li",[v._v("计算机程序设计艺术")])]),v._v(" "),e("h2",{attrs:{id:"写在最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[v._v("#")]),v._v(" 写在最后")]),v._v(" "),e("p",[v._v("伽利略曾经说过，"),e("code",[v._v("“宇宙这本书是用数学语言写成的”")]),v._v("。")]),v._v(" "),e("p",[v._v("数学不光是曾经在学校学过的公式，它其实是一种思维模式，所以最终要提高的是归纳、总结和抽象的能力。")]),v._v(" "),e("p",[v._v("前面的路还很长，共勉。")])])}),[],!1,null,null,null);_.default=a.exports}}]);